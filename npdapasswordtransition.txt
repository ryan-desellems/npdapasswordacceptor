//Transition function for the npda
//to accept language w={L^n D^m: L is an element of {a,b}, D is an element of {1,0}, n>1, n > m }

//Q Naught Transitions
//=========================================================
//process initial portion of password
q0.a.z=q0.az
q0.b.z=q0.az
q0.1.z=q0.nz
q0.0.z=q0.nz

//push duplicates
q0.a.a=q0.aa
q0.b.a=q0.aa
q0.1.n=q0.nn
q0.0.n=q0.nn

//pop opposites
q0.a.n=q0.*
q0.b.n=q0.*
q0.1.a=q0.*
q0.0.a=q0.*

//ensure one letter and one digit
q0.a.n=q1.*
q0.b.n=q1.*
q0.1.a=q1.*
q0.0.a=q1.*
//--------------------------------------------------------

//Q One Transitions
//=========================================================
//continue processess similar to q0
//process initial portion of password
q1.a.z=q1.az
q1.b.z=q1.az
q1.1.z=q1.nz
q1.0.z=q1.nz

//push duplicates
q1.a.a=q1.aa
q1.b.a=q1.aa
q1.1.n=q1.nn
q1.0.n=q1.nn

//pop opposites
q1.a.n=q1.*
q1.b.n=q1.*
q1.1.a=q1.*
q1.0.a=q1.*

//more letters than digits, go to final state
q1.*.a=q2.a
//--------------------------------------------------------

//========================================================
//final state status
q0=reject
q1=reject
q2=accept
